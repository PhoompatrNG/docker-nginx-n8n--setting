server {
    # ให้ Nginx ฟังก์ชันบน port 80 (HTTP)
    listen 80;
    # กำหนด server name (ชื่อโดเมน) ที่ server block นี้จะตอบสนอง
    # !!!สำคัญ!!!: แทนที่ "your.domain.com" ด้วยโดเมนจริงของคุณ หรือ IP address ของ server
    # หากทดสอบบน local อาจใช้ "localhost" หรือ IP ของ Docker host
    server_name localhost;

    # กำหนดการจัดการ requests สำหรับทุก location (path) ภายใต้ server_name นี้
    location / {
        # ส่งต่อ (proxy) request ไปยัง n8n service ที่ทำงานอยู่ที่ http://n8n:5678
        # 'n8n' คือชื่อ service ของ n8n container ที่กำหนดใน docker-compose.yml
        # 5678 คือ port ที่ n8n application ทำงานอยู่ภายใน container
        proxy_pass http://n8n:5678;

        # ตั้งค่า HTTP headers ที่จะถูกส่งต่อไปยัง n8n service
        # เพื่อให้ n8n ทราบข้อมูลที่ถูกต้องเกี่ยวกับ client และ request เดิม
        proxy_set_header Host $host; # ส่ง Host header เดิมของ client
        proxy_set_header X-Real-IP $remote_addr; # ส่ง IP address จริงของ client
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # ส่งต่อ list ของ IP addresses ที่ request ผ่านมา
        proxy_set_header X-Forwarded-Proto $scheme; # ส่ง protocol เดิม (http หรือ https)

        # Headers ที่จำเป็นสำหรับการทำงานของ WebSockets (n8n UI ใช้ WebSockets)
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        # เพิ่มขนาด buffer สำหรับ proxy (อาจจำเป็นสำหรับ requests/responses ขนาดใหญ่)
        # proxy_buffers 8 16k;
        # proxy_buffer_size 32k;
        # proxy_busy_buffers_size 64k;
        # proxy_temp_file_write_size 64k;

        # กำหนด timeout สำหรับการเชื่อมต่อกับ upstream server (n8n)
        # proxy_connect_timeout 60s;
        # proxy_send_timeout 60s;
        # proxy_read_timeout 60s;
    }

    # หากคุณต้องการเปิดใช้งาน HTTPS (SSL/TLS) คุณจะต้อง:
    # 1. Uncomment ส่วน ports "443:443" ใน docker-compose.yml
    # 2. จัดเตรียม SSL certificate และ private key (เช่น จาก Let's Encrypt หรือ CA อื่นๆ)
    # 3. สร้าง server block ใหม่ที่ listen บน port 443 และกำหนดค่า SSL directives
    #
    # ตัวอย่าง server block สำหรับ HTTPS (ต้องปรับแก้ path ของ certificate และ key):
    #
    # server {
    #     listen 443 ssl http2;
    #     server_name your.domain.com; # แทนที่ด้วยโดเมนของคุณ
    #
    #     ssl_certificate /etc/letsencrypt/live/your.domain.com/fullchain.pem; # Path ไปยัง SSL certificate
    #     ssl_certificate_key /etc/letsencrypt/live/your.domain.com/privkey.pem; # Path ไปยัง SSL private key
    #
    #     # โหลด DH parameters (ถ้ามี) เพื่อเพิ่มความปลอดภัย
    #     # ssl_dhparam /etc/nginx/dhparam.pem;
    #
    #     # การตั้งค่า SSL เพิ่มเติม (สามารถดูได้จาก nginx.conf หรือ best practices)
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_prefer_server_ciphers on;
    #     ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
    #     ssl_session_cache shared:SSL:10m;
    #     ssl_session_timeout 1d;
    #     ssl_session_tickets off;
    #
    #     # HSTS (HTTP Strict Transport Security) - บังคับให้ใช้ HTTPS
    #     # add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    #
    #     location / {
    #         proxy_pass http://n8n:5678;
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #         proxy_set_header Upgrade $http_upgrade;
    #         proxy_set_header Connection "upgrade";
    #     }
    #
    #     # สำหรับ Certbot (Let's Encrypt) ACME challenge (ถ้าใช้)
    #     # location ~ /.well-known/acme-challenge/ {
    #     #     allow all;
    #     #     root /var/www/certbot; # ตรวจสอบ path นี้ให้ตรงกับ volume ใน docker-compose.yml
    #     # }
    # }
    #
    # หากต้องการ redirect HTTP ไป HTTPS อัตโนมัติ, ให้เพิ่มใน server block ของ port 80:
    #
    # server {
    #    listen 80;
    #    server_name your.domain.com;
    #    return 301 https://$host$request_uri;
    # }
}
